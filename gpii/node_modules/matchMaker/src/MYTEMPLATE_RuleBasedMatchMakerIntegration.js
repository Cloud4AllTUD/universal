/*!
GPII Default Matchmaker

Copyright 2012 OCAD University
Copyright 2012 Antranig Basman

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/


//NIKOS
var globalDeviceReporterPayload;
var globalUserPreferences;
var globalSolutions;
var globalStrategy;
var RESULT;




var client = require('./RBMM_JavaRpcClient');

var instance = new client();

instance.on('message', function(msg){
    console.log('Received a message...');
    console.log(msg);
    console.log("");
});

instance.on('sent', function(msg){
    console.log('Sent a message...');
    console.log(msg);
    console.log("");
});

instance.on('Error', function(msg){
    console.log("Oh no! An error was received!");
    console.log(msg.errorMessage);
    console.log(msg.stackTrace);
    console.log('');
    
    // I'm just gonna go ahead and give up because I'm weak.
    instance.sendGoodbye();
});

instance.on('Info', function(msg){
    //console.log("I received some special info ...");
	
	if(msg.message == "magnification: 4")
	{
		RESULT = msg;
		console.log("BRAVO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		//matchmakingFunctionContext.gpii.matchMaker.match(globalUserPreferences, globalSolutions, globalStrategy);
	}
	
    console.log(msg.message);
    console.log("");
});

//-NIKOS


var fluid = require("infusion");
    
var matchMaker = fluid.registerNamespace("gpii.matchMaker");
var ruleBased = fluid.registerNamespace("gpii.matchMaker.ruleBasedMatchMaker");

ruleBased.disposeStrategy = function () {
    
	
	
	
	console.log('\n\n\nMATCHMAKING FUNCTION (START)!\n');
		
		//globalUserPreferences = preferences;
		//globalSolutions = solutions;
		//globalStrategy = strategy;
		
		// Start it up (Hello exchanges happen)
		instance.run();
		
		// Receive acknowledgement of hello
		instance.once('Info', function()
		{
			instance.sendUserProfile(preferences);
			
			instance.once('Info', function()
			{
				instance.sendDeviceReporterPayload(globalDeviceReporterPayload);
				
				instance.once('Info', function()
				{
					instance.sendRunRules("ready for calculations...");
					
					instance.once('Info', function()
					{
						instance.sendGoodbye();
					
						console.log('Communication between Node.js and Java is now stopped!');
						console.log("--------------------");
						
						//console.log(RESULT);

						//preferences.display.screenEnhancement.magnification = 4;
						
						//gpii.matchMaker.match(preferences, solutions, strategy);
						
						
						
														
						
						
						
					})
				})
			})
			
			
		});
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	fluid.each(solrecs, function(solrec) {
        var accepted = fluid.find(leaves, function (leaf) {
            return fluid.get(solrec.skeleton, leaf, matchMaker.accessConfigs.get);
        });
        solrec.disposition = accepted? "accept" : "reject";
    });
    return solrecs;
};






/* 

(function () {

    "use strict";

    var fluid = require("infusion"),
        path = require("path"),
        semver = require("semver"),
        when = require("when"),
        gpii = fluid.registerNamespace("gpii");

    fluid.require("gpiiFramework", require);
    fluid.require("./MatchPost.js", require);
    fluid.require("transformer", require);

    fluid.defaults("gpii.ruleBasedMatchMaker", {
        gradeNames: ["gpii.app", "autoInit"],
        handlers: {
            matchPost: {
                route: "/match",
                type: "post"
            }
        },
        strategy: "gpii.ruleBasedMatchMaker.flat.disposeStrategy",
        solutionsReporterUrl: "",
        ontologyServerUrl: "",
        root: path.join(__dirname, ".."),
        components: {
            rawSolutionsReporter: {
                type: "gpii.dataSource"
            },
            solutionsReporter: {
                type: "gpii.callbackWrappingDataSource"
            },
            rawOntologyServer: {
                type: "gpii.dataSource"
            },
            ontologyServer: {
                type: "gpii.callbackWrappingDataSource"
            },
            transformer: {
                type: "gpii.transformer"
            }
        },
        invokers: {
            match: "gpii.ruleBasedMatchMaker.match",
            prefilterSolutions: "gpii.ruleBasedMatchMaker.prefilterSolutions",
            filterSolutionsByVersion: "gpii.ruleBasedMatchMaker.filterSolutionsByVersion"
        }
    });

    
	

    gpii.ruleBasedMatchMaker.match = function (preferences, solutions, strategy) {
		console.log('\n\n\nMATCHMAKING FUNCTION (START)!\n');
		
		globalUserPreferences = preferences;
		globalSolutions = solutions;
		globalStrategy = strategy;
		
		// Start it up (Hello exchanges happen)
		instance.run();
		
		// Receive acknowledgement of hello
		instance.once('Info', function()
		{
			instance.sendUserProfile(preferences);
			
			instance.once('Info', function()
			{
				instance.sendDeviceReporterPayload(globalDeviceReporterPayload);
				
				instance.once('Info', function()
				{
					instance.sendRunRules("ready for calculations...");
					
					instance.once('Info', function()
					{
						instance.sendGoodbye();
					
						console.log('Communication between Node.js and Java is now stopped!');
						console.log("--------------------");
						
						//console.log(RESULT);

						//preferences.display.screenEnhancement.magnification = 4;
						
						gpii.matchMaker.match(preferences, solutions, strategy);
						
						
						
														
						
						
						
					})
				})
			})
			
			
		});
		
		
		
		//console.dir("\npreferences (start)\n");
		//console.dir(preferences);
		//console.dir("\npreferences (end)\n");
		
		---start-----------var fs = require('fs');
		var outputFilename = './tempUserPreferences.txt';
		fs.writeFile(outputFilename, JSON.stringify(preferences, null, 4), function(err) {
			if(err) {
			  console.log(err);
			} else {
			  console.log("JSON saved to ");
			}
		}); 
		
		var outputFilenameSolutionsRegistry = './tempSolutionsRegistry.txt';
		fs.writeFile(outputFilenameSolutionsRegistry, JSON.stringify(solutions, null, 4), function(err) {
			if(err) {
			  console.log(err);
			} else {
			  console.log("JSON saved to ");
			}
		}); 
		
		var java = require("java");
		java.classpath.push("../node_modules/universal/gpii/node_modules/matchMaker/src/RB_MM/Cloud4All_MatchMaker.jar");

		var myArgs = java.newArray("java.lang.String", ["../node_modules/universal/gpii/node_modules/matchMaker/src/RB_MM/cloudSammy.txt", 
											"../node_modules/universal/gpii/node_modules/matchMaker/src/RB_MM/cloud_DeviceReporterExample_rule1.txt", 
											"../node_modules/universal/gpii/node_modules/matchMaker/src/RB_MM/cloud_SolutionsRegistry_win32.txt"]);
		var result = java.callStaticMethodSync("gpii.basic.Main", "main", myArgs);
		----end----------
		//console.dir("\nsolutions (start)\n");
		//console.dir(solutions);
		//console.dir("\nsolutions (end)\n");
		
		//console.dir("\nstrategy (start)\n");
		//console.dir(strategy);
		//console.dir("\nstrategy (end)\n");
		
		
		

    };

})(); */