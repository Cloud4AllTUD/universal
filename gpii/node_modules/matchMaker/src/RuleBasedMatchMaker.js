/*!
GPII Rule Based Matchmaker

Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

//NIKOS
var RULES_RESULT;




var client = require('./RBMM_JavaRpcClient');

var instance = new client();

instance.on('message', function(msg){
    console.log('Received a message...');
    console.log(msg);
    console.log("");
});

instance.on('sent', function(msg){
    console.log('Sent a message...');
    console.log(msg);
    console.log("");
});

instance.on('Error', function(msg){
    console.log("Oh no! An error was received!");
    console.log(msg.errorMessage);
    console.log(msg.stackTrace);
    console.log('');
    
    // I'm just gonna go ahead and give up because I'm weak.
    instance.sendGoodbye();
});

instance.on('Info', function(msg){
    //console.log("I received some special info ...");
	RULES_RESULT = msg.message;
    console.log(msg.message);
    console.log("");
});

//-NIKOS

var fluid = fluid || require("infusion"),
    when = require("when"),
    gpii = fluid.registerNamespace("gpii"),
    ruleBasedMatchMaker = fluid.registerNamespace("gpii.ruleBasedMatchMaker");

ruleBasedMatchMaker.match = function (callbackWrapper, preferences, solutions, originalModel, strategy) {
    // TODO: Integrate rule based match.
    fluid.log("RULE BASED MATCH MAKER MATCH IS USED");
    fluid.log("Device information is available: ", originalModel.device);

    return when(THIS_IS_YOUR_ASYNC_FUNCTION(preferences, originalModel.device, callbackWrapper.wrap), function () {
        return when(gpii.matchMaker.disposeSolutions(preferences, solutions, strategy), function (disposed) {
            var togo = [];
            fluid.each(disposed, function(solrec) {
                if (solrec.disposition === "accept") {
                    togo.push(solrec.solution);
                }
            });
            return togo;
        });
    });
};

function THIS_IS_YOUR_ASYNC_FUNCTION (preferences, device, wrap) {
    console.log("\n\nTO PREFS SET POU MOU STELNEI TO NODE.JS:\n");
	console.dir(preferences);
	console.log("\n\n");
	
	var deferred = when.defer(),
        resolver = deferred.resolver,
        promise = deferred.promise;
		
		
	// Start communication with Java (the RB-MM)
	// As a first step, Java sends a "hello" message to Node.js
	instance.run();

	//Receive acknowledgement of hello
	instance.once('Info', wrap(function()
	{
		//Node.js send user prefs to Java
		instance.sendUserProfile(preferences);

		//Node.js gets confirmation message from Java for getting user prefs
		instance.once('Info', wrap(function()
		{
			//Node.js send device reporter payload to Java
			instance.sendDeviceReporterPayload(device);

			//Node.js receives confirmation from Java that device reporter payload has been received
			instance.once('Info', wrap(function()
			{
				//Node.js tells java to run the rules
				instance.sendRunRules("ready for calculations...");

				//Node.js receives the final output of the RB-MM
				instance.once('Info', wrap(function()
				{
					//Close connection between Node.js and Java
					instance.sendGoodbye();

					console.log('Communication between Node.js and Java is now stopped!');
					
					
	    
					fluid.log("\n\nRULES_RESULT:\n");
					console.dir(RULES_RESULT);
					fluid.log("\n\n");
					
					
					var newPrefsWords=RULES_RESULT.split(" ");
					
					for(i=0; i<newPrefsWords.length;i++)
					{
						console.log(i + ") " + newPrefsWords[i]);
						if(newPrefsWords[i] == "ENABLE_DEFAULT_THEME")
						{
							if(preferences != null
								&& preferences.applications != null
								&& preferences.applications["com.microsoft.windows.highContrast"] != null
								&& preferences.applications["com.microsoft.windows.highContrast"].parameters != null
								&& preferences.applications["com.microsoft.windows.highContrast"].parameters.highContrastOn != null
								&& preferences.applications["com.microsoft.windows.highContrast"].parameters.highContrastOn.value != null)
							{
								preferences.applications["com.microsoft.windows.highContrast"].parameters.highContrastOn.value = 0;
							}
							else
							{
								var json_highContrast_string = '{ "http://registry.gpii.org/applications/com.microsoft.windows.highContrast":  [{ "value": { "highContrastOn": { "value": 0, "path": "pvParam.dwFlags.HCF_HIGHCONTRASTON" } } }] }';
								var json_highContrast_obj = JSON.parse( json_highContrast_string );
								preferences.applications["com.microsoft.windows.highContrast"] = json_highContrast_obj;
							}
						}
						else if(newPrefsWords[i] == "ENABLE_MAGNIFIER_WITH_INVERSE_COLOURS")
						{
							var json_magnifier_string = '{"id": "com.microsoft.windows.magnifier", "parameters": { "Magnification": { "value": 100, "dataType": "REG_DWORD" }, "ZoomIncrement": { "value": 50, "dataType": "REG_DWORD" }, "Invert": { "value": 1, "dataType": "REG_DWORD" }, "FollowMouse": { "value": 1, "dataType": "REG_DWORD" }, "FollowFocus": { "value": 1, "dataType": "REG_DWORD" }, "FollowCaret": { "value": 1, "dataType": "REG_DWORD" }, "MagnificationMode": { "value": 2, "dataType": "REG_DWORD" } } }';
							var json_magnifier_obj = JSON.parse( json_magnifier_string );
							preferences.applications["com.microsoft.windows.magnifier"] = json_magnifier_obj;
							
							//console.log("\n\nNEW PREFS:\n");
							//console.dir(preferences);
							//fluid.log("\n\n");
							
						}						 
					}
					
					resolver.resolve();
					
				}))
			}))
		}))
	}));
 
	

    /*setTimeout(wrap(function () {
        setTimeout(wrap(function () {
            preferences.display.screenEnhancement.magnification = 6;
	    
	    fluid.log("\n\nPrefs:\n");
	    console.dir(preferences);
	    
            resolver.resolve();
        }), 100);
    }), 100);*/

    return promise;
}