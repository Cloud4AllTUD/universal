/*!
GPII Rule Based Matchmaker

Copyright 2013 OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = fluid || require("infusion"),
    when = require("when"),
    gpii = fluid.registerNamespace("gpii"),
    ruleBasedMatchMaker = fluid.registerNamespace("gpii.ruleBasedMatchMaker");

ruleBasedMatchMaker.match = function (callbackWrapper, preferences, solutions, originalModel, strategy) {
    // TODO: Integrate rule based match.
    fluid.log("RULE BASED MATCH MAKER MATCH IS USED");
    fluid.log("Device information is available: ", originalModel.device);

    return when(THIS_IS_YOUR_ASYNC_FUNCTION(preferences, originalModel.device, callbackWrapper.wrap), function () {
        return when(gpii.matchMaker.disposeSolutions(preferences, solutions, strategy), function (disposed) {
            var togo = [];
            fluid.each(disposed, function(solrec) {
                if (solrec.disposition === "accept") {
                    togo.push(solrec.solution);
                }
            });
            return togo;
        });
    });
};

function THIS_IS_YOUR_ASYNC_FUNCTION (preferences, device, wrap) {
    var deferred = when.defer(),
        resolver = deferred.resolver,
        promise = deferred.promise;

    setTimeout(wrap(function () {
        setTimeout(wrap(function () {
            preferences.display.screenEnhancement.magnification = 4;
            resolver.resolve();
        }), 100);
    }), 100);

    return promise;
}